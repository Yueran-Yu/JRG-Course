{"version":3,"sources":["jQuery.js"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","oldApi","className","i","length","classList","add","find","selector","arr","console","log","subElements","from","concat","end","each","fn","call","parent","node","indexOf","parentNode","push","children","print"],"mappings":"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","file":"jQuery.5c69adcb.js","sourceRoot":"../src","sourcesContent":["window.jQuery = function (selectorOrArray) {\n  let elements\n  if (typeof selectorOrArray === 'string') {\n    elements = document.querySelectorAll(selectorOrArray)\n  } else if (selectorOrArray instanceof Array) {\n    elements = selectorOrArray\n  }\n\n  return {\n    oldApi: selectorOrArray.oldApi,\n\n    \"addClass\": function (className) {\n      for (let i = 0; i < elements.length; i++) {\n        elements[i].classList.add(className)\n      }\n      return this\n    },\n    find(selector) {\n      let arr = []\n      console.log(elements)\n      for (let i = 0; i < elements.length; i++) {\n        const subElements = Array.from(elements[i].querySelectorAll(selector))\n        arr = arr.concat(subElements)\n      }\n      console.log(arr)\n      arr.oldApi = this\n\n      console.log(`==== 这里的this返回的是 原来的 api 整个对象.\n                   为啥是原来的呢？因为操作到此，我们并没有 返回 新的 api 的结果，\n                   新的 api 的结果 看下面 那个 return jQuery(arr),\n                   return 完了 跳出循环之后，这个 api 的 结果 才是 最新的，\n                   在别的地方 再 引用 this 的时候 api 才是 最新操作完的值`)\n      return jQuery(arr)\n    },\n    end() {\n      return this.oldApi\n    },\n    each(fn) {\n      for (let i = 0; i < elements.length; i++) {\n        fn.call(null, elements[i], i)\n      }\n      return this\n    },\n    parent() {\n      const arr = []\n      this.each(node => {\n        if (arr.indexOf(node.parentNode) === -1) {\n          arr.push(node.parentNode)\n        }\n      })\n      return jQuery(arr)\n    },\n    children() {\n      const arr = []\n      this.each(node => {\n        // think of it a replacement for Array.prototype.concat\n        // const numbers1 = [1, 2, 3, 4, 5];\n        // const numbers2 = [ ...numbers1, 1, 2, 6,7,8];\n        // this will be [1, 2, 3, 4, 5, 1, 2, 6, 7, 8]\n        // a parent node may has many children, so the children will be stored as an array\n        arr.push(...node.children)\n      })\n      return jQuery(arr)\n    },\n    print() {\n      console.log(elements)\n    }\n  }\n}\n\n// function hello() {\n//   return {\n//     \"b\": 890,\n//     \"c\": function () {\n//       return this\n//     },\n//     d(hello) {\n//       console.log(hello)\n//       return this\n//     }\n//   }\n// }\n\n\n// console.log(hello())\n// obj.fn(p1)\n// obj.fn.call(obj,p1)\n//  equal to\n// const obj = hello()\n// const p1 = 'fly high~!!!!!'\n// console.log(obj.d(p1))\n// console.log(obj.d.call(obj, p1))\n\n"]}